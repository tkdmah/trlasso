// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// covC
NumericMatrix covC(NumericMatrix X);
RcppExport SEXP _trlasso_covC(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(covC(X));
    return rcpp_result_gen;
END_RCPP
}
// softThresholdC2
double softThresholdC2(double z, double g1, double g2, double b);
RcppExport SEXP _trlasso_softThresholdC2(SEXP zSEXP, SEXP g1SEXP, SEXP g2SEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type g1(g1SEXP);
    Rcpp::traits::input_parameter< double >::type g2(g2SEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(softThresholdC2(z, g1, g2, b));
    return rcpp_result_gen;
END_RCPP
}
// covCdaC
NumericMatrix covCdaC(NumericMatrix Gamma_, NumericVector gamma_, NumericVector lambda_, NumericMatrix init_beta, NumericVector beta_tilde_, NumericVector penalty_factor_lasso_, NumericVector penalty_factor_trlasso_, double alpha, double maxit, double eps, bool strong);
RcppExport SEXP _trlasso_covCdaC(SEXP Gamma_SEXP, SEXP gamma_SEXP, SEXP lambda_SEXP, SEXP init_betaSEXP, SEXP beta_tilde_SEXP, SEXP penalty_factor_lasso_SEXP, SEXP penalty_factor_trlasso_SEXP, SEXP alphaSEXP, SEXP maxitSEXP, SEXP epsSEXP, SEXP strongSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma_(Gamma_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma_(gamma_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_(lambda_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type init_beta(init_betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_tilde_(beta_tilde_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type penalty_factor_lasso_(penalty_factor_lasso_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type penalty_factor_trlasso_(penalty_factor_trlasso_SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type strong(strongSEXP);
    rcpp_result_gen = Rcpp::wrap(covCdaC(Gamma_, gamma_, lambda_, init_beta, beta_tilde_, penalty_factor_lasso_, penalty_factor_trlasso_, alpha, maxit, eps, strong));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_trlasso_covC", (DL_FUNC) &_trlasso_covC, 1},
    {"_trlasso_softThresholdC2", (DL_FUNC) &_trlasso_softThresholdC2, 4},
    {"_trlasso_covCdaC", (DL_FUNC) &_trlasso_covCdaC, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_trlasso(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
